package com.example.crudspringboot.Services.UserServiceIMPL;import com.example.crudspringboot.Entity.Users;import com.example.crudspringboot.Repository.IUsersRepository;import com.example.crudspringboot.Services.usersService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.logging.Logger;//Users Implementation@Servicepublic class UsersImplementation implements usersService {    @Autowired    private IUsersRepository repository;    @Override    public List<Users> getUser() {        try{            return (List<Users>) repository.findAll();        }catch (Exception e){            throw new RuntimeException("Error al obtener los usuarios", e);        }    }    @Override    public Users createdUser(Users Users) {        try{            return repository.save(Users);        }catch (Exception e){            throw new RuntimeException("Error al crear el usuario", e);        }    }    @Override    public Users updateUser(Long id, Users user) {        try {            Users existUser = repository.findById(id).orElse(null);            if(existUser != null){                existUser.setNombre(user.getNombre());                existUser.setApellido(user.getApellido());                existUser.setEmail(user.getEmail());                existUser.setEdad(user.getEdad());                existUser.setSexo(user.getSexo());                return repository.save(existUser);            }            throw new RuntimeException("Usuario no encontrado");        }catch (Exception e){            throw new RuntimeException("Error al actualizar el usuario", e);        }    }    @Override    public void deleteUser(Long id) {        try {            repository.deleteById(id);        }catch (Exception e){            throw new RuntimeException("Error al eliminar el usuario", e);        }    }}